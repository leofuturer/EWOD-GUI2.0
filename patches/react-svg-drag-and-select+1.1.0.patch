diff --git a/node_modules/react-svg-drag-and-select/lib/components/SVGContainer/SVGContainer.js b/node_modules/react-svg-drag-and-select/lib/components/SVGContainer/SVGContainer.js
index 32c92ab..259c31f 100644
--- a/node_modules/react-svg-drag-and-select/lib/components/SVGContainer/SVGContainer.js
+++ b/node_modules/react-svg-drag-and-select/lib/components/SVGContainer/SVGContainer.js
@@ -74,7 +74,12 @@ var INIT_STATE = {
   width: 0,
   height: 0,
   left: 0,
-  top: 0
+  top: 0,
+  scaleXY: {
+    scale: 1,
+    svgTop: 0,
+    svgLeft: 0,
+  },
 };

 var SVGContainer = function (_React$PureComponent) {
@@ -92,15 +97,13 @@ var SVGContainer = function (_React$PureComponent) {
     }

     return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SVGContainer.__proto__ || Object.getPrototypeOf(SVGContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = INIT_STATE, _this.onMouseDown = function (e) {
+      if (e.nativeEvent.which !== 1) return;
       var _this$svg$getBounding = _this.svg.getBoundingClientRect(),
           left = _this$svg$getBounding.left,
           top = _this$svg$getBounding.top;

-      var clientX = e.clientX,
-          clientY = e.clientY;
-
-      var x = clientX - left;
-      var y = clientY - top;
+      const x = e.nativeEvent.offsetX || e.pageX - left;
+      const y = e.nativeEvent.offsetY || e.pageY - top;
       _this.x = x;
       _this.y = y;
       _this.setState({
@@ -109,20 +112,20 @@ var SVGContainer = function (_React$PureComponent) {
         width: 0,
         height: 0,
         left: x + left,
-        top: y + top
+        top: y + top,
+        scaleXY: _this.props.scalexy,
       });
       document.addEventListener('mousemove', _this.onMouseMove);
       document.addEventListener('mouseup', _this.onMouseUp);
     }, _this.onMouseMove = function (e) {
+      if (!_this.svg) _this.svg = e.path[0];
       var _this$svg$getBounding2 = _this.svg.getBoundingClientRect(),
           left = _this$svg$getBounding2.left,
           top = _this$svg$getBounding2.top;

-      var clientX = e.clientX,
-          clientY = e.clientY;
+      const x = e.offsetX || e.pageX - left;
+      const y = e.offsetY || e.pageY - top;

-      var x = clientX - left;
-      var y = clientY - top;
       var nextX = Math.min(x, _this.x);
       var nexty = Math.min(y, _this.y);
       _this.setState({
@@ -176,7 +179,8 @@ var SVGContainer = function (_React$PureComponent) {
         };
       });
     }, _this.onRef = function (ref) {
-      _this.svg = ref;
+      if (!ref) _this.svg = document.getElementById(".greenArea");
+      else _this.svg = ref;
     }, _temp), _possibleConstructorReturn(_this, _ret);
   }

@@ -195,6 +199,7 @@ var SVGContainer = function (_React$PureComponent) {
           isMovable = _props.isMovable,
           items = _props.items,
           style = _props.style,
+          mode = _props.mode,
           otherProps = _objectWithoutProperties(_props, ['onItemsChange', 'onSelectChange', 'isSelectable', 'isMovable', 'items', 'style']);

       var _state = this.state,
@@ -203,13 +208,14 @@ var SVGContainer = function (_React$PureComponent) {
           x = _state.x,
           y = _state.y,
           width = _state.width,
-          height = _state.height;
+          height = _state.height,
+          scalexy = _state.scaleXY;
+
       var onMouseDown = this.onMouseDown,
           onPositionChange = this.onPositionChange,
           onIntersectChange = this.onIntersectChange,
           onRef = this.onRef;

-
       return _react2.default.createElement(
         'svg',
         Object.assign({
@@ -230,9 +236,11 @@ var SVGContainer = function (_React$PureComponent) {
             key: id,
             tagName: tagName,
             isMovable: isMovable,
-            onPositionChange: onPositionChange
+            onPositionChange: onPositionChange,
+            scalexy: scalexy,
+            mode: mode,
           }, others, {
-            box: { left: left, top: top, width: width, height: height },
+            box: { left: left, top: top, width: width, height: height, x: x, y: y },
             onIntersectChange: onIntersectChange
           }));
         }),
diff --git a/node_modules/react-svg-drag-and-select/lib/components/ShapeItem/ShapeItem.js b/node_modules/react-svg-drag-and-select/lib/components/ShapeItem/ShapeItem.js
index d54fe6e..740ccb9 100644
--- a/node_modules/react-svg-drag-and-select/lib/components/ShapeItem/ShapeItem.js
+++ b/node_modules/react-svg-drag-and-select/lib/components/ShapeItem/ShapeItem.js
@@ -37,8 +37,14 @@ function _inherits(subClass, superClass) { if (typeof superClass !== "function"
 // https://silentmatt.com/rectangle-intersection/
 var checkIntersect = function checkIntersect(A, box, tagName) {
   if (tagName === 'text') return false;
-
-  return A.left < box.left + box.width && A.left + A.width > box.left && A.top < box.top + box.height && A.top + A.height > box.top;
+  if (A && box) {
+    const leftA = A.left; const rightBox = (box.x + box.width);
+    const rightA = A.left + A.width; const leftBox = box.x;
+    const topA = A.top; const bottomBox = (box.y + box.height);
+    const bottomA = A.top + A.height; const topBox = box.y;
+    return (leftA < rightBox && rightA > leftBox && topA < bottomBox && bottomA > topBox);
+  }
+  return false;
 };

 var ShapeItem = function (_React$PureComponent) {
@@ -71,7 +77,6 @@ var ShapeItem = function (_React$PureComponent) {
           onRef = this.onRef;
       var isIntersect = this.state.isIntersect;

-
       return _react2.default.createElement(Component, Object.assign({
         ref: onRef,
         style: _extends({}, style, {
@@ -151,18 +156,70 @@ var _initialiseProps = function _initialiseProps() {
   };

   this.onRef = function (ref) {
-    _this2.component = ref;
+    if (!ref) _this2.component = document.getElementById(_this2.props.id);
+    else _this2.component = ref;
   };

   this.componentWillUnMount = function () {
     document.removeEventListener('scroll', _this2.updatePosition);
   };

+  this.getPathClientRect = function() {
+    const boundingRect = _this2.component.getBoundingClientRect();
+    const scale = _this2.component.getAttribute("scale");
+    const alertBottom = document.querySelector("div.makeStyles-root-2").getBoundingClientRect().bottom;
+    let leftBoi, topBoi;
+
+    if (_this2.component.getAttribute("mode") === "PIN") {
+      leftBoi = (boundingRect.x - parseFloat(_this2.component.getAttribute("svgx")) - 214) / scale;
+      topBoi = (boundingRect.y - parseFloat(_this2.component.getAttribute("svgy")) - 287 - alertBottom) / scale;
+    } else {
+      leftBoi = (boundingRect.x - parseFloat(_this2.component.getAttribute("svgx")) - 49) / scale;
+      topBoi = (boundingRect.y - parseFloat(_this2.component.getAttribute("svgy")) - alertBottom) / scale;
+    }
+    return { leftBoi, topBoi, boundingRect, scale };
+  };
+
   this.updatePosition = function () {
-    _this2.clientRect = _this2.component && _this2.component.getBoundingClientRect && _this2.component.getBoundingClientRect();
+    if (_this2.component) {
+      if (_this2.component.nodeName === "path") {
+        const { leftBoi, topBoi, boundingRect, scale } = _this2.getPathClientRect();
+        _this2.clientRect = {
+          left: leftBoi,
+          top: topBoi,
+          width: boundingRect.width / scale,
+          height: boundingRect.height / scale,
+        };
+      } else {
+        _this2.clientRect = {
+          left: parseInt(_this2.component.getAttribute("x")),
+          top: parseInt(_this2.component.getAttribute("y")),
+          width: parseInt(_this2.component.getAttribute("width")),
+          height: parseInt(_this2.component.getAttribute("height")),
+        };
+      }
+    }
   };

   this.checkIntersect = function (props) {
+    if (!_this2.clientRect) {
+      if (_this2.component.nodeName === "path") {
+        const { leftBoi, topBoi, boundingRect, scale } = _this2.getPathClientRect();
+        _this2.clientRect = {
+          left: leftBoi,
+          top: topBoi,
+          width: boundingRect.width / scale,
+          height: boundingRect.height / scale,
+        };
+      } else {
+        _this2.clientRect = {
+          left: parseInt(_this2.component.getAttribute("x")),
+          top: parseInt(_this2.component.getAttribute("y")),
+          width: parseInt(_this2.component.getAttribute("width")),
+          height: parseInt(_this2.component.getAttribute("height")),
+        };
+      }
+    }
     var isIntersect = checkIntersect(_this2.clientRect, props.box, _this2.props.tagName);
     _this2.setState({ isIntersect: isIntersect });
     _this2.props.onIntersectChange({ id: props.id, isIntersect: isIntersect });
